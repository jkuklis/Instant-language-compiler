-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParInstant where
import AbsInstant
import LexInstant
import ErrM

}

%name pProgram Program
%name pStmt Stmt
%name pListStmt ListStmt
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp4 Exp4
%name pExp Exp
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  '-' { PT _ (TS _ 5) }
  '/' { PT _ (TS _ 6) }
  ';' { PT _ (TS _ 7) }
  '=' { PT _ (TS _ 8) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Program :: { Program }
Program : ListStmt { AbsInstant.Prog $1 }
Stmt :: { Stmt }
Stmt : Ident '=' Exp { AbsInstant.SAss $1 $3 }
     | Exp { AbsInstant.SExp $1 }
ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] }
         | Stmt { (:[]) $1 }
         | Stmt ';' ListStmt { (:) $1 $3 }
Exp1 :: { Exp }
Exp1 : Exp2 '+' Exp1 { AbsInstant.ExpAdd $1 $3 } | Exp2 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 '-' Exp3 { AbsInstant.ExpSub $1 $3 } | Exp3 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '*' Exp4 { AbsInstant.ExpMul $1 $3 }
     | Exp3 '/' Exp4 { AbsInstant.ExpDiv $1 $3 }
     | Exp4 { $1 }
Exp4 :: { Exp }
Exp4 : Integer { AbsInstant.ExpLit $1 }
     | Ident { AbsInstant.ExpVar $1 }
     | '(' Exp ')' { $2 }
Exp :: { Exp }
Exp : Exp1 { $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

